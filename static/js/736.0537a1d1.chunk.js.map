{"version":3,"file":"static/js/736.0537a1d1.chunk.js","mappings":"8MAEaA,EAAW,CACpBC,QAAS,mCACTC,SAAS,gCAETC,YAAY,WAAD,wBAAE,oGACsBC,EAAAA,EAAAA,IAAA,UAAaJ,EAASE,SAAtB,qCAA2DF,EAASC,UAAWI,OAAM,SAAAC,GAChH,MAAM,IAAIC,MAAMD,EAAME,QACzB,IAHQ,cACHC,EADG,gBAIIA,EAAiBC,KAAKC,QAJ1B,mFAAF,kDAAC,GAOZC,eAAe,WAAD,wBAAE,WAAMC,GAAN,uFACcT,EAAAA,EAAAA,IAAA,UAAaJ,EAASE,SAAtB,gCAAsDF,EAASC,QAA/D,kBAAgFY,IAAaR,OAAM,SAAAC,GACzH,MAAM,IAAIC,MAAMD,EAAME,QACzB,IAHW,cACNM,EADM,yBAILA,EAAYJ,KAAKC,SAJZ,2CAAF,mDAAC,GAOfI,gBAAgB,WAAD,wBAAE,WAAMC,GAAN,uFACcZ,EAAAA,EAAAA,IAAA,UAAaJ,EAASE,SAAtB,iBAAuCc,EAAvC,oBAA0DhB,EAASC,UAAWI,OAAM,SAAAC,GAC3G,MAAM,IAAIC,MAAMD,EAAME,QACzB,IAHY,cACPS,EADO,yBAINA,EAAaP,MAJP,2CAAF,mDAAC,GAOhBQ,gBAAgB,WAAD,wBAAE,WAAMF,GAAN,uFACcZ,EAAAA,EAAAA,IAAA,UAAaJ,EAASE,SAAtB,iBAAuCc,EAAvC,4BAAkEhB,EAASC,UAAWI,OAAM,SAAAC,GACnH,MAAM,IAAIC,MAAMD,EAAME,QACzB,IAHY,cACPW,EADO,yBAINA,EAAaT,MAJP,2CAAF,mDAAC,GAOhBU,gBAAgB,WAAD,wBAAE,WAAMJ,GAAN,uFACcZ,EAAAA,EAAAA,IAAA,UAAaJ,EAASE,SAAtB,iBAAuCc,EAAvC,4BAAkEhB,EAASC,UAAWI,OAAM,SAAAC,GACnH,MAAM,IAAIC,MAAMD,EAAME,QACzB,IAHY,cACPW,EADO,yBAINA,EAAaT,KAAKC,SAJZ,2CAAF,mDAAC,G,2FChCPU,E,OAAWC,EAAAA,GAAH,gI,kBCkCrB,EA/Ba,WACT,OAAmBC,EAAAA,EAAAA,GAAS,QAArBC,GAAP,eAEA,OACI,SAACH,EAAD,UACyB,IAApBG,EAASC,QAAgBD,EAASE,KAAKC,KAAI,SAAAD,GAAI,OAC5C,2BACI,wBAAKA,EAAKE,QACV,uCACgBF,EAAKG,cADrB,IACqCH,EAAKI,eAHrCJ,EAAKK,GAD8B,KAU3D,C,yHChBYR,EAAW,SAAAS,GACtB,OAA0BC,EAAAA,EAAAA,UAAkB,YAATD,EAAqB,CAAC,EAAI,IAA7D,eAAOE,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA8BR,OA5BAE,EAAAA,EAAAA,YAAU,WACR,IACE,GAAa,SAATN,EAIF,YAHA,iBAAC,0FACCG,EADD,SACgBnC,EAAAA,EAAAA,gBAAyBoC,GADzC,4EAAD,GAMF,GAAa,YAATJ,EAIF,YAHA,iBAAC,0FACCG,EADD,SACgBnC,EAAAA,EAAAA,gBAAyBoC,GADzC,4EAAD,GAMF,GAAa,YAATJ,EAIF,YAHA,iBAAC,0FACCG,EADD,SACgBnC,EAAAA,EAAAA,gBAAyBoC,GADzC,4EAAD,EAQH,CAHC,MAAO9B,GAEP,MADAiC,QAAQC,IAAIlC,GACN,IAAIC,MAAMD,EAAME,QACvB,CACF,GAAE,CAAC4B,EAASJ,IAEN,CAACE,EACT,C","sources":["API/API.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","hooks/useMovie.jsx"],"sourcesContent":["import axios from \"axios\";\n\nexport const MovieAPI = {\n    API_KEY: '8725014291262b48aab04b426e3a8196',\n    BASE_URL: `https://api.themoviedb.org/3/`,\n\n    getTrending: async () => {\n        const trendingForToday = await axios.get(`${MovieAPI.BASE_URL}/trending/all/day?api_key=${MovieAPI.API_KEY}`).catch(error => {\n            throw new Error(error.message);\n        });\n        return await trendingForToday.data.results;\n    },\n\n    getMovieByName: async movieName => {\n        const movieByName = await axios.get(`${MovieAPI.BASE_URL}search/movie?api_key=${MovieAPI.API_KEY}&query=${movieName}`).catch(error => {\n            throw new Error(error.message);\n        });\n        return movieByName.data.results;\n    },\n\n    getMovieDetails: async movieID => {\n        const movieDetails = await axios.get(`${MovieAPI.BASE_URL}movie/${movieID}?api_key=${MovieAPI.API_KEY}`).catch(error => {\n            throw new Error(error.message);\n        });\n        return movieDetails.data;\n    },\n\n    getMovieCredits: async movieID => {\n        const movieCredits = await axios.get(`${MovieAPI.BASE_URL}movie/${movieID}/credits?api_key=${MovieAPI.API_KEY}`).catch(error => {\n            throw new Error(error.message);\n        });\n        return movieCredits.data;\n    },\n\n    getMovieReviews: async movieID => {\n        const movieCredits = await axios.get(`${MovieAPI.BASE_URL}movie/${movieID}/reviews?api_key=${MovieAPI.API_KEY}`).catch(error => {\n            throw new Error(error.message);\n        });\n        return movieCredits.data.results;\n    },\n};\n\n","import styled from \"@emotion/styled\";\n\nexport const CastList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n\n  li {\n    border-bottom: 1px solid #000000;\n  }\n`;","import PropTypes from 'prop-types';\nimport { CastList } from \"./Cast.styled\";\nimport { useMovie } from \"hooks/useMovie\";\n\n\nconst Cast = () => {\n    const [castList] = useMovie('Cast');\n\n    return (\n        <CastList>\n            {castList.length !== 0 && castList.cast.map(cast => (\n                <li key={cast.id}>\n                    <h4>{cast.name}</h4>\n                    <p>\n                        Character: {cast.original_name}/{cast.character}\n                    </p>\n                </li>\n            ))}\n        </CastList>\n    );\n};\n\nCast.propTypes = {\n  castList: PropTypes.shape({\n    length: PropTypes.number.isRequired,\n    cast: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        original_name: PropTypes.string.isRequired,\n        character: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n};\n\nexport default Cast;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { MovieAPI } from \"API/API\";\n\nexport const useMovie = type => {\n  const [state, setState] = useState(type === 'Details' ? {} : []);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    try {\n      if (type === 'Cast') {\n        (async () => {\n          setState(await MovieAPI.getMovieCredits(movieId));\n        })();\n        return;\n      }\n\n      if (type === 'Reviews') {\n        (async () => {\n          setState(await MovieAPI.getMovieReviews(movieId));\n        })();\n        return;\n      }\n\n      if (type === 'Details') {\n        (async () => {\n          setState(await MovieAPI.getMovieDetails(movieId));\n        })();\n        return;\n      }\n    } catch (error) {\n      console.log(error);\n      throw new Error(error.message);\n    }\n  }, [movieId, type]);\n\n  return [state];\n};"],"names":["MovieAPI","API_KEY","BASE_URL","getTrending","axios","catch","error","Error","message","trendingForToday","data","results","getMovieByName","movieName","movieByName","getMovieDetails","movieID","movieDetails","getMovieCredits","movieCredits","getMovieReviews","CastList","styled","useMovie","castList","length","cast","map","name","original_name","character","id","type","useState","state","setState","movieId","useParams","useEffect","console","log"],"sourceRoot":""}